@using BlazorDynamicForm.Attributes.Panel
@using System.Reflection
@typeparam TModel

<ContainerComponent>
    @foreach (var column in Columns.Values)
    {
        @foreach (var property in column)
        {
            <DynamicDisplayTemplate TitleWidth="@GetTitleWidth(property)">
                <Title>
                    <label style="font-weight:bold;">@GetLabel(property)</label>
                </Title>
                <Control>
                    <DynamicPanelControl Model="Model" Property="property" />
                </Control>
            </DynamicDisplayTemplate>
        }
    }
</ContainerComponent>

@code {
    [Parameter]
    public TModel Model { get; set; }

    private Dictionary<int, List<PropertyInfo>> Columns;

    protected override void OnInitialized()
    {
        Columns = GetColumns();

    }

    private Dictionary<int, List<PropertyInfo>> GetColumns()
    {
        return Model
            .GetType()
            .GetProperties()
            .Where(x => Attribute.IsDefined(x, typeof(DynamicPanelAttribute)))
            .OrderBy(x => x.GetCustomAttribute<DynamicPanelAttribute>().Index)
            .GroupBy(x => x.GetCustomAttribute<DynamicPanelAttribute>().ColumnIndex)
            .ToDictionary(x => x.Key, y => y.ToList());
    }

    private int GetTitleWidth(PropertyInfo property)
    {
        var attribute = property.GetCustomAttribute<DynamicPanelAttribute>();
        return attribute?.Width ?? 0;
    }

    private string GetLabel(PropertyInfo property)
    {
        var attribute = property.GetCustomAttribute<DynamicPanelAttribute>();
        return attribute?.Name ?? property.Name;
    }
}
